#include<Winsock2.h>
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
#pragma comment(lib,"ws2_32.lib")
#define DEFAULT_PORT 5052  //端口号！！！！！
#define BUFFER_LENGTH 1024
using namespace std;
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//444
int main()
{
	int iPort = DEFAULT_PORT;
	WSADATA wsaData;
	SOCKET sSocket;
	int iLen, iLen1;
	int iSend;
	int iRecv;
	char recv_buf[BUFFER_LENGTH];

	struct sockaddr_in ser, cli;
	printf("-------------------\n");
	printf("Client_Sever waiting\n");
	printf("-------------------\n");
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Failed to load winsock.\n");
		return 0;
	}
	//创建套接口
	sSocket = socket(AF_INET, SOCK_DGRAM, 0);
	if (sSocket == INVALID_SOCKET)
	{
		printf("socket() Failed:%d\n", WSAGetLastError());
		return 0;
	}
	//建立客户服务器端地址
	ser.sin_family = AF_INET;
	ser.sin_port = htons(iPort);
	ser.sin_addr.s_addr = htonl(INADDR_ANY);
	if (bind(sSocket, (LPSOCKADDR)&ser, sizeof(ser)) == SOCKET_ERROR)
	{
		printf("bind()Failed:%d\n", WSAGetLastError());
		return 0;
	}
	iLen = sizeof(cli);
	memset(recv_buf, 0, sizeof(recv_buf));
	//初始化接收缓冲区

	while (1)
	{
		//从主服务器端接收数据
		iRecv = recvfrom(sSocket, recv_buf, sizeof(recv_buf), 0, (struct sockaddr*)&cli, &iLen);
		if (iRecv == SOCKET_ERROR)
		{
			printf("recvfrom()failed.:%d\n", WSAGetLastError());
			break;
		}
		else if (iRecv == 0)
			break;
		else
		{
			int slen = strlen(recv_buf);

			if (recv_buf[slen - 1] == '#')
			{
				printf("关闭会话\n"); break;
			}
			else
			{
				printf("%s\n", recv_buf);

			}
		}


	}

	closesocket(sSocket);
	WSACleanup();
	return 0;
}
