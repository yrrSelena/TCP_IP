#include<Winsock2.h>
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
#pragma comment(lib,"ws2_32.lib")
#define DEFAULT_PORT 5051
#define DATA_BUFFER 1024
using namespace std;
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//444
void main()
{
	WSADATA wsaData;
	SOCKET sClient;
	int iPort = DEFAULT_PORT;//, iPort1 = DEFAULT_PORT + 1;
	int iLen;
	int iSend;
	char send_user[DATA_BUFFER];
	char send_user1[DATA_BUFFER];
	char send_buf[DATA_BUFFER];
	char send_buff[DATA_BUFFER];
	char serverIP[20];
	struct sockaddr_in ser;//第三方地址
	cout << "第三方服务器IP地址：";
	cin >> serverIP;
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Failed to load Winsock.\n");
		return;
	}
	ser.sin_family = AF_INET;
	ser.sin_port = htons(iPort);
	ser.sin_addr.s_addr = inet_addr(serverIP);
	sClient = socket(AF_INET, SOCK_DGRAM, 0);
	if (sClient == INVALID_SOCKET)
	{
		printf("socket()Failed:%d\n", WSAGetLastError());
		return;
	}
	iLen = sizeof(ser);

	//输入用户帐号
	cout << "User:";
	cin >> send_user;
	sprintf(send_user1, "@%s", send_user);
	iSend = sendto(sClient, send_user1, sizeof(send_user1), 0, (struct sockaddr*)&ser, iLen);
	if (iSend == SOCKET_ERROR)
	{
		printf("sendto()Failed:%d\n", WSAGetLastError());
		return;
	}
	else if (iSend == 0)
	{
		return;
	}

	while (1) {
		cout << send_user << ": ";
		cin >> send_buf;
		//给第三方服务器传输数据
		//sprintf(send_buff, "%s:%s", send_user, send_buf);
		iSend = sendto(sClient, send_buf, sizeof(send_buf), 0, (struct sockaddr*)&ser, iLen);
		if (iSend == SOCKET_ERROR)
		{
			printf("sendto()Failed:%d\n", WSAGetLastError());
			return;
		}
		else if (iSend == 0)
		{
			return;
		}
		if (strcmp(send_buf, "#") == 0)
		{
			break;
		}
	}
	closesocket(sClient);
	WSACleanup();
}


