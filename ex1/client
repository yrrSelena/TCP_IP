#include<Winsock2.h>
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#pragma comment(lib,"ws2_32.lib")
#define DEFAULT_PORT 5051
#define DATA_BUFFER 1024
using namespace std;
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
int main()//int argc,char *argv[]
{
	WSADATA wsaData;
	SOCKET sClient;
	int iPort = DEFAULT_PORT;
	int iLen;
	int iSend;
	int iRecv;
	char send_user[] = "应镕嵘";
	char recv_user[] = "王岑";
	char send_buf[DATA_BUFFER];
	char recv_buf[DATA_BUFFER];
	//char recv_buf[DATA_BUFFER];

	struct sockaddr_in ser;
	char serverIP[20];
	cout << "server IP address:";
	cin >> serverIP;

	/*if(argc<2)
	{
	printf("Usage:client[server IP address]\n");
	return 0;
	}*/
	memset(recv_buf, 0, sizeof(recv_buf));
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Failed to load Winsock.\n");
		return 0;
	}
	ser.sin_family = AF_INET;
	ser.sin_port = htons(iPort);
	ser.sin_addr.s_addr = inet_addr(serverIP);
	//ser.sin_addr.s_addr=inet_addr(argv[1]);
	sClient = socket(AF_INET, SOCK_STREAM, 0);
	if (sClient == INVALID_SOCKET)
	{
		printf("socket()Failed:%d\n", WSAGetLastError());
		return 0;
	}
	//iLen = sizeof(ser);

	//请求与服务器端建立TCP连接
	if (connect(sClient, (struct sockaddr*)&ser, sizeof(ser)) == INVALID_SOCKET)
	{
		printf("connect()Failed:%d\n", WSAGetLastError());
		return 0;
	}
	else
	{
		//向服务器发送数据
		while (1)
		{
			cout << send_user << ": ";
			cin >> send_buf;
			iSend = send(sClient, send_buf, sizeof(send_buf), 0);
			if (iSend == SOCKET_ERROR)
			{
				printf("sendto()Failed:%d\n", WSAGetLastError());
				return 0;
			}
			else if (iSend == 0)
			{
				return 0;
			}
			/*else
			{
			printf("client sendto()succeeded.\n");
			}*/
			if (strcmp(send_buf, "#") == 0)
			{
				printf("关闭.\n"); break;
			}
		}

	}

	closesocket(sClient);
	WSACleanup();
	return 0;
}


