#include<Winsock2.h>
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
#pragma comment(lib,"ws2_32.lib")
#define DEFAULT_PORT 5051
#define DATA_BUFFER 1024
using namespace std;
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//3333
void main()//int argc,char *argv[]
{
	WSADATA wsaData;
	SOCKET sClient;
	int iPort = DEFAULT_PORT;//, iPort1 = DEFAULT_PORT + 1;
	int iLen, iLen1;
	int iSend, iSend1;
	int iRecv;
	char send_user[] = "王岑";
	char recv_user[] = "应镕嵘";
	char send_buf[DATA_BUFFER];
	char send_buff[DATA_BUFFER];
	char recv_buf[DATA_BUFFER];
	char serverIP[20], serverIP1[20];
	struct sockaddr_in ser, ser1;//对方地址和本地地址
	cout << "对方服务器IP地址：";
	cin >> serverIP;
	cout << "本地服务器IP地址：";
	cin >> serverIP1;
	memset(recv_buf, 0, sizeof(recv_buf));
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Failed to load Winsock.\n");
		return;
	}
	ser.sin_family = AF_INET;
	ser.sin_port = htons(iPort);
	ser.sin_addr.s_addr = inet_addr(serverIP);
	//ser.sin_addr.s_addr=inet_addr(argv[1]);//IP地址输入
	ser1.sin_family = AF_INET;
	ser1.sin_port = htons(iPort);
	ser1.sin_addr.s_addr = inet_addr(serverIP1);
	sClient = socket(AF_INET, SOCK_DGRAM, 0);
	if (sClient == INVALID_SOCKET)
	{
		printf("socket()Failed:%d\n", WSAGetLastError());
		return;
	}
	iLen = sizeof(ser);
	iLen1 = sizeof(ser1);
	while (1) {
		cout << send_user << ": ";
		cin >> send_buf;
		//给对方服务器传输数据
		strcpy(send_buff, send_user);
		strcat(send_buff, ": ");
		strcat(send_buff, send_buf);
		iSend = sendto(sClient, send_buff, sizeof(send_buff), 0, (struct sockaddr*)&ser, iLen);
		if (iSend == SOCKET_ERROR)
		{
			printf("sendto()Failed:%d\n", WSAGetLastError());
			return;
		}
		else if (iSend == 0)
		{
			return;
		}
		else
		{
			//printf("client sendto()succeeded.\n");
		}
		if (strcmp(send_buf, "#") == 0)
		{
			//printf("关闭.\n"); //break;
		}
		//给本机服务器传输数据
		iSend1 = sendto(sClient, send_buff, sizeof(send_buff), 0, (struct sockaddr*)&ser1, iLen1);
		if (iSend1 == SOCKET_ERROR)
		{
			printf("sendto()Failed:%d\n", WSAGetLastError());
			return;
		}
		else if (iSend1 == 0)
		{
			return;
		}
		else
		{
			//printf("client sendto()succeeded.\n");
		}
		if (strcmp(send_buf, "#") == 0)
		{
			printf("关闭.\n"); break;
		}

		/*
		iRecv = recvfrom(sClient, recv_buf, sizeof(recv_buf), 0, (struct sockaddr*)&ser, &iLen);
		if (iRecv == SOCKET_ERROR)
		{
		printf("recvfrom()Failed:%d\n", WSAGetLastError());
		return;
		}
		else if (iRecv == 0)
		{
		return;
		}
		else
		{
		if (strcmp(recv_buf, "#") == 0)
		{
		printf("关闭.\n"); break;
		}
		else
		{
		printf("%s: %s.\n", recv_user,recv_buf);
		}
		}*/

	}
	closesocket(sClient);
	WSACleanup();
}


